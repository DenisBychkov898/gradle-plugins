def map = ['HTTP_PROXY': 'http', 'HTTPS_PROXY': 'https']
for (e in System.getenv()) {
	def key = e.key.toUpperCase()
	if (key in map) {
		def base = map[key]
		def url = e.value.toURL()
		println "configuring systemProp.${base}.proxy=${url.host}:${url.port}"
		System.setProperty("${base}.proxyHost", url.host.toString())
		System.setProperty("${base}.proxyPort", url.port.toString())
	}
}

include 'systemd-application',
		'build-on-change',
		'jdk-bootstrap',
		'jpa-schema-gen',
		'cli-base',
		'kubectl',
		'assemble-needed',
		'gcloud',
		'terraform',
		'az',
		'oc',
		'helm'

gradle.beforeProject { Project project ->
	project.with {

		// get password from environment if available
		if (System.env['SIGNING_PASSWORD']) {
			ext['signing.password'] = System.env['SIGNING_PASSWORD']
		}
		String sonarLogin = System.env['SONAR_LOGIN']
		if (sonarLogin) {
			System.setProperty("sonar.login", sonarLogin)
		}

		buildscript {
			repositories {
				maven {
					url('https://plugins.gradle.org/m2')
				}
			}
		}
		repositories {
			mavenCentral()
			maven {
				url('https://plugins.gradle.org/m2')
			}
		}
		version = rootProject.version
		group = rootProject.group
	}
}
